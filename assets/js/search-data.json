{
  
    
        "post0": {
            "title": "Explaining IoU",
            "content": "An IOU explanation and implementaion walk through . In this blogpost i will explain what is IOU, where is it used , how is it implemented . What is IOU . IOU is pretty much clear by the name intersection over union. The formula is . IOU = Area of Intersection / Area of union | Area of union = First Box Area + Second Box Area -Intersection Area | . . How is it implemented(basic) . Here i will show a simple implementation in pytorch.If you look at the below picture we will get a basic idea of how to get the intersection between two boxes, the rest are simple . . For the basic implementation of this can be found in this nice blogpost and from that is basic implemenation is like this . #collapse-hide def batch_iou(a, b, epsilon=1e-5): &quot;&quot;&quot; Given two arrays `a` and `b` where each row contains a bounding box defined as a list of four numbers: [x1,y1,x2,y2] where: x1,y1 represent the upper left corner x2,y2 represent the lower right corner It returns the Intersect of Union scores for each corresponding pair of boxes. Args: a: (numpy array) each row containing [x1,y1,x2,y2] coordinates b: (numpy array) each row containing [x1,y1,x2,y2] coordinates epsilon: (float) Small value to prevent division by zero Returns: (numpy array) The Intersect of Union scores for each pair of bounding boxes. &quot;&quot;&quot; # COORDINATES OF THE INTERSECTION BOXES x1 = np.array([a[:, 0], b[:, 0]]).max(axis=0) y1 = np.array([a[:, 1], b[:, 1]]).max(axis=0) x2 = np.array([a[:, 2], b[:, 2]]).min(axis=0) y2 = np.array([a[:, 3], b[:, 3]]).min(axis=0) # AREAS OF OVERLAP - Area where the boxes intersect width = (x2 - x1) height = (y2 - y1) # handle case where there is NO overlap width[width &lt; 0] = 0 height[height &lt; 0] = 0 area_overlap = width * height # COMBINED AREAS area_a = (a[:, 2] - a[:, 0]) * (a[:, 3] - a[:, 1]) area_b = (b[:, 2] - b[:, 0]) * (b[:, 3] - b[:, 1]) area_combined = area_a + area_b - area_overlap # RATIO OF AREA OF OVERLAP OVER COMBINED AREA iou = area_overlap / (area_combined + epsilon) return iou . . Where is it used and how to implement for that use case . But the above implementation assumes that both the bounding boxes have the same set of batches,which is rarely the case. IOU is mainly used in object detection tasks. . We will have a set of anchors for each position in the feature map,for eg say if we have a feature map of shape 5x5 and there are 3 anchors per position then there will be 5x5x3=75 total anchors | The Ground trouth boxes for that feature map may be much less the number of anchors | We need to find the matching anchors to the bounding boxes, so we can select that portion of the feature map for the downstream predictions. | Implementing for the above use case . Basically when we get two boxes say . a- B,M,4 -- the anchor boxes after reshaping(B,A,H,W,4) where A is number of anchors . b- B,N,4 --the real bboxes. N is the max number of boxes in certain image and the other images will be padded with -1. . we need to compute iou between a and b so each box in a is compare with each box in b. So we should make N copies of copies of each box in a to be compare with N bboxes. Also if we want to vectorise this operation then we need to make M copies of b. So the final dimensions will be . a - B,M,N,4 b - B,M,N,4 . Now we can say like each slice of the both a and b can be compared . import torch #say the given anchors and bboxes are in shape x_top,y_top,x_btm,y_btm sample_anchors = torch.tensor([[[[[5.,5,15,15], [25,25,35,35],[1,1,9,9]]]]]) #only 1 batch bboxes = torch.tensor([[[1.,1,11,11], [20,20,30,30]]]) B = bboxes.shape[0] no_of_bboxes = bboxes.shape[1] print(&#39;sample anchors n&#39;, sample_anchors,&#39; n&#39;) print(&#39;sample bboxes n&#39;, bboxes,&#39; n&#39;) print(&#39;sample number of anchors shape &#39;,sample_anchors.shape) print(&#39;sample bboxes shape &#39;,bboxes.shape,&#39; n&#39;) . sample anchors tensor([[[[[ 5., 5., 15., 15.], [25., 25., 35., 35.], [ 1., 1., 9., 9.]]]]]) sample bboxes tensor([[[ 1., 1., 11., 11.], [20., 20., 30., 30.]]]) sample number of anchors shape torch.Size([1, 1, 1, 3, 4]) sample bboxes shape torch.Size([1, 2, 4]) . Here we need to compare the 3 anchor boxes with the two bboxes, first we reshape the anchors to be of shape batch,total_anchors,4, . we need to compute iou between sample_anchors and bboxes so each of the 3 anchors are compared with the bboxes which is 2 here. So for vectorized implementation we should make 3 copies of copies of each anchor in sample_anchors to be compare with 2 bboxes. Also if we should make 3 copies of b to aid in vectorized implementation. So the final dimensions will be . sample_anchors - B,3,2,4 | b=boxes - B,3,2,4 | . sample_anchors = sample_anchors.reshape(B,-1,4) no_of_anchors = sample_anchors.shape[1] sample_anchors = sample_anchors.unsqueeze(2).expand(-1,-1,no_of_bboxes,-1) print(sample_anchors) print(sample_anchors.shape) . tensor([[[[ 5., 5., 15., 15.], [ 5., 5., 15., 15.]], [[25., 25., 35., 35.], [25., 25., 35., 35.]], [[ 1., 1., 9., 9.], [ 1., 1., 9., 9.]]]]) torch.Size([1, 3, 2, 4]) . bboxes = bboxes.unsqueeze(1).expand(-1,no_of_anchors,-1,-1) print(bboxes) print(bboxes.shape) . tensor([[[[ 1., 1., 11., 11.], [20., 20., 30., 30.]], [[ 1., 1., 11., 11.], [20., 20., 30., 30.]], [[ 1., 1., 11., 11.], [20., 20., 30., 30.]]]]) torch.Size([1, 3, 2, 4]) . #first we need to find the intersection for that width and height of the intersection area #this inturn can be obtained by finding the lefttop and bottom corner cordinates and subtracting them left_top = torch.max(sample_anchors[:,:,:,:2],bboxes[:,:,:,:2]) right_bottom = torch.min(sample_anchors[:,:,:,2:],bboxes[:,:,:,2:]) delta = right_bottom - left_top print(delta) . tensor([[[[ 6., 6.], [ -5., -5.]], [[-14., -14.], [ 5., 5.]], [[ 8., 8.], [-11., -11.]]]]) . #The first element of delta is width and the next element is height, we can remove negative values #since this will be boxes that are not intersecting #(remember the the image top left if (0,0) and bottom y is positive downwards) delta[delta&lt;0]=0 #now find the intersection area interesection_area = delta[:,:,:,0]*delta[:,:,:,1] print(interesection_area) print(interesection_area.shape) . tensor([[[36., 0.], [ 0., 25.], [64., 0.]]]) torch.Size([1, 3, 2]) . A small picture represntation is tried below,we can see that first and 3rd anchors intersect with first bounding box while the 2nd anchor intersect with the next one . From the intersection area above we can see that the where there are no itersection the area is zero and thus in this case the first and last anchor mathces with the first bbox while the second anchor mathces with the second one . #now we need to find the Area of union which is #Area of union = First Box Area + Second Box Area -Intersection Area sample_anchors_area = (sample_anchors[:,:,:,2]-sample_anchors[:,:,:,0])*(sample_anchors[:,:,:,3] - sample_anchors[:,:,:,1]) bbox_area = (bboxes[:,:,:,2] - bboxes[:,:,:,0]) * (bboxes[:,:,:,3] - bboxes[:,:,:,1]) iou = interesection_area/(sample_anchors_area+bbox_area - interesection_area) print(iou) print(iou.shape) . tensor([[[0.2195, 0.0000], [0.0000, 0.1429], [0.6400, 0.0000]]]) torch.Size([1, 3, 2]) . so the final iou matrix will have shape (Batch,no_of_anchors,no_of_bboxes) . Downstream usage of this iou . This iou matrix will be used for calculation the regression offsets, negative anchors,ground truth class . The other place where iou is used is for mean Average Precision at the end which if possible i will explain in another post . Complete code . Below i will provide a small code for implementing this in a batch . def IOU(anchors,bboxes): #anchors B,A,H,W,4 #bboxes B,N,4 B = anchors.shape[0] anchors = anchors.reshape(B,-1,4) M,N = anchors.shape[1],bboxes.shape[1] #expanding anchors = anchors.unsqueeze(2).expand(-1,-1,N,-1) bboxes = bboxes.unsqueeze(1).expand(-1,M,-1,-1) left_top = torch.max(anchors[:,:,:,:2],bboxes[:,:,:,:2]) right_bottom = torch.min(anchors[:,:,:,2:],bboxes[:,:,:,2:]) delta = right_bottom - left_top delta[delta&lt;0] = 0 intersection_area = delta[:,:,:,0]*delta[:,:,:,1] anchors_area = (anchors[:,:,:,2]-anchors[:,:,:,0])*(anchors[:,:,:,3] -anchors[:,:,:,1]) bbox_area = (bboxes[:,:,:,2] - bboxes[:,:,:,0])* (bboxes[:,:,:,3] - bboxes[:,:,:,1]) iou = interesection_area/(anchors_area+bbox_area - interesection_area) return iou .",
            "url": "https://akashprakas.github.io/My-blog/jupyter/2020/09/20/pytorch_iou.html",
            "relUrl": "/jupyter/2020/09/20/pytorch_iou.html",
            "date": " • Sep 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Sort",
            "content": "SIMPLE ONLINE AND REALTIME TRACKING . Brief Intro… . I assume that you have read the paper and this will be a walk through of the implementation. Basically the paper assumes a constant velocity model. The detection ouputs are fed to the tracker and the tracker will track multiple object between frames. You can fine tune some of the parameters of the tracker to match your specific needs. . Code Walkthrough . The Sort() class is the main class we use for updating the tracker. The init method of sort class is . class Sort(object): def __init__(self,max_age=1,min_hits=3): &quot;&quot;&quot; Sets key parameters for SORT &quot;&quot;&quot; self.max_age = max_age self.min_hits = min_hits self.trackers = [] self.frame_count = 0 . The init method takes two arguments max_age and min_hits, max_age will be used to remove the trackers from the list of trackers. The tracker will have a time_since_update variable which will get incremented by one each time an update is happening. So if we set max_age to 1 then it means that if were tracking an object in frames say 2,3,4 and in frames 5 and 6 the detection output(that is the tracker input) was empty then that tracker will be removed from the trackers list and even if the same object reapper (say our detector was not able to detect the object in frames 5 and 6 even though the object was there and in the 7th frame it detects) then a new tracker will be assigned to it. . #remove dead tracklet if(trk.time_since_update &gt; self.max_age): self.trackers.pop(i) . The main method in sort is the update(self,dets) which takes in the detector output as input. The detector output is expected to be a numpy array of the form [[x1,y1,x2,y2,score],[x1,y1,x2,y2,score],...].Also make sure you call this method even when there are empty detections with the np.empty(0,5). .",
            "url": "https://akashprakas.github.io/My-blog/2020/03/08/SORT.html",
            "relUrl": "/2020/03/08/SORT.html",
            "date": " • Mar 8, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . Front Matter is a markdown cell at the beginning of your notebook that allows you to inject metadata into your notebook. For example: . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks just like you can with markdown. . For example, here is a footnote 1. . . This is the footnote.&#8617; . |",
            "url": "https://akashprakas.github.io/My-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Test Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://akashprakas.github.io/My-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Not your neigbourhood spiderman. .",
          "url": "https://akashprakas.github.io/My-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}